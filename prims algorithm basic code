#include <iostream>
#include<vector>
#include<climits>
using namespace std;

class Graph
{
public:
    int vertex;
    int edge;
    int matrix[100][100];
    vector<int>final1;
    vector<int>start1;
    vector<int>edge1;
    int weight_spanning_tree=0;
    Graph(int x,int y)
    {
        vertex=x;
        edge=y;
        for(int i=0;i<100;i++)
        {
            for(int j=0;j<100;j++)
            {
                matrix[i][j]=0;
            }
        }
        for(int i=0;i<vertex;i++)
        {
            final1.push_back(-1);//-1 indicates that vertex is not in final
            start1.push_back(1);//1 indicates that vertex is in start
        }
    }   
        void addedge(int u,int v,int weight)
        {
            matrix[u][v]=weight;
            matrix[v][u]=weight;
        }
        
        void display()
        {
            for(int i=0;i<vertex;i++)
            {
                for(int j=0;j<vertex;j++)
                {
                  cout<<matrix[i][j]<<" ";  
                }
                cout<<endl;
            }
        }
        void prims()
        {
            final1[0]=1;
            start1[0]=-1;
            int count=vertex-1;
            for(int i=0;i<count;i++)
            {
                int min=INT_MAX;
                int parent=-1;
                int child=-1;
                for(int j=0;j<vertex;j++)
                {
                    if(final1[j]==1)//vertex is in final1 array
                    {
                    for(int k=0;k<vertex;k++)
                    {
                        if((matrix[j][k]!=0) && (matrix[j][k]<min)  && (final1[k]==-1))
                        {
                            min=matrix[j][k];
                            parent=j;
                            child=k;
                        }
                    }//end k loop
                    }
                }//end j loop
                if(parent!=-1 || child!=-1)
                {
                edge1.push_back(parent);
                edge1.push_back(child);
                final1[child]=1;
                start1[child]=-1;
                final1[parent]=1;
                start1[parent]=-1;
                weight_spanning_tree+=min;
                edge1.push_back(min);
                }
            }//end i loop
            
            cout<<"weight of minimum spanning tree:"<<weight_spanning_tree<<endl;
            for(int i=0;i<edge1.size();i+=3)
            {
                cout<<edge1[i]<<" "<<edge1[i+1]<<" "<<":"<<edge1[i+2]<<endl;
            }
            
        }
        
        
        
        
};
        
int main() {
    Graph g(7,9);
    g.addedge(0,1,3);
    g.addedge(1,4,2);
    g.addedge(4,6,2);
    g.addedge(6,5,2);
    g.addedge(5,3,3);
    g.addedge(3,0,4);
    g.addedge(1,3,3);
    g.addedge(1,5,7);
    g.addedge(4,3,6);
     
    g.display();
    g.prims();

    return 0;
}
