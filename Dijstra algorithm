#include<iostream>
using namespace std;
class Graph
{
public:
	int v;
	int e;
	int m[100][100];
	int data;
	int distance[100];
	int vertex[100];
	Graph(int x,int y)
	{
	v=x;
	e=y;
	for(int i=0;i<100;i++)
	{
	 for(int j=0;j<100;j++)
	 {
	 m[i][j]=0;
	 }
	}
	for(int i=0;i<v;i++)
	{
	distance[i]=v;
	 vertex[i]=-1;
	}
	}
	void addedge(int x,int y,int w)
	{
	m[x][y]=w;
	m[y][x]=w;
	}
	void display()
	{
	for(int i=0;i<v;i++)
	{
	 for(int j=0;j<v;j++)
	 {
	  cout<<m[i][j]<<" ";
	 }
	cout<<endl;
	}
	}
	
	void dijkstra()
	{
	int current=0;
	int count=0;
	while(count<v)
	{
	vertex[current]=1;
	for(int i=0;i<v;i++)
	{
          if(m[current][i]!=0 && vertex[i]==-1)
          {
          int temp=distance[current]+m[current][i];
           if(distance[i]>temp)
           {
           distance[i]=temp;
           }
          }
	}
	int min=9999;
	for(int i=0;i<v;i++)
	{
	if(vertex[i]==-1)
	 {
	 if(min>distance[i])
	  {
	  current=i;
	  min=distance[i];
	  }
	 }
	}
	
	for(int i=0;i<v;i++)
	{
	cout<<distance[i]<<endl;
	}
	}
	}
	
	
};
int main()
{
Graph g(4,4);
g.addedge(1,2,3);
g.addedge(2,2,4);
g.addedge(1,1,4);
g.display();
g.dijkstra();
return 0;
}
