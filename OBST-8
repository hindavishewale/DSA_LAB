#include<iostream>
#include<iomanip>
using namespace std;

class OBST
{
public:
    int n;
    float q[10];
    float p[10];
    float w[10][10];
    float c[10][10];

    void accept()
    {
        cout << "Enter number of keys: ";
        cin >> n;

        cout << "Enter " << n << " successful probabilities: ";
        for (int i = 0; i < n; i++)
        {
            cin >> p[i];
        }

        cout << "Enter " << n + 1 << " unsuccessful probabilities: ";
        for (int i = 0; i <= n; i++)
        {
            cin >> q[i];
        }
    }

    void weight_calculate()
    {
        for (int i = 0; i <= n; i++)
        {
            w[i][i] = q[i];
        }

        for (int i = 0; i <= n; i++)
        {
            for (int j = i + 1; j <= n; j++)
            {
                w[i][j] = w[i][j - 1] + p[j - 1] + q[j];
            }
        }
    }

    void cost_calculate()
    {
        for (int i = 0; i <= n; i++)
        {
            c[i][i] = 0;
        }

        for (int len = 1; len <= n; len++)
        {
            for (int i = 0; i <= n - len; i++)
            {
                int j = i + len;
                float mincost = 9999;
                for (int k = i + 1; k <= j; k++)
                {
                    float cost = c[i][k - 1] + c[k][j];
                    if (cost < mincost)
                    {
                        mincost = cost;
                    }
                }
                c[i][j] = mincost + w[i][j];
            }
        }
    }

    void displayWeight()
    {
        cout << "\nWeight Matrix (w[i][j]):\n\n";
        cout << setw(6) << " ";
        for (int j = 0; j <= n; j++)
        {
            cout << setw(8) << j;
        }
        cout << endl;

        for (int i = 0; i <= n; i++)
        {
            cout << setw(6) << i;
            for (int j = 0; j <= n; j++)
            {
                if (j >= i)
                    cout << setw(8) << fixed << setprecision(2) << w[i][j];
                else
                    cout << setw(8) << " ";
            }
            cout << endl;
        }
    }

    void displayCost()
    {
        cout << "\nCost Matrix (c[i][j]):\n\n";
        cout << setw(6) << " ";
        for (int j = 0; j <= n; j++)
        {
            cout << setw(8) << j;
        }
        cout << endl;

        for (int i = 0; i <= n; i++)
        {
            cout << setw(6) << i;
            for (int j = 0; j <= n; j++)
            {
                if (j >= i)
                    cout << setw(8) << fixed << setprecision(2) << c[i][j];
                else
                    cout << setw(8) << " ";
            }
            cout << endl;
        }
    }
};

int main()
{
    OBST o;
    o.accept();
    o.weight_calculate();
    o.cost_calculate();
    o.displayWeight();
    o.displayCost();

    return 0;
}
