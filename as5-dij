#include<iostream>
using namespace std;
class Graph
{
public:
	int v,i;
	int e;
	int m[100][100];
	int data;
	int distance[100];
	int vertex[100];
	string location[100];
	Graph(int x,int y)
	{
	v=x;
	e=y;
	for(int i=0;i<100;i++)
	{
	 for(int j=0;j<100;j++)
	 {
	 m[i][j]=0;
	 }
	}
	for(int i=0;i<v;i++)
	{
	 vertex[i]=-1;
	 distance[i]=9999;
	}
	distance[0]=0;
	}
	
	
	int stringtoindex(string name)
	{
	    for(i=0;i<v;i++)
	    {
	        if(location[i]==name)
	        {
	            return i;
	        }
	    }
	    return -1;
	}
	
   void addstring()
   {
       for(i=0;i<v;i++)
       {
           cin>>location[i];
       }
   }
	
	
	void addedge(string s1,string s2,int w)
	{
	int x=stringtoindex(s1); 
	int y=stringtoindex(s2); 
	m[x][y]=w;
	m[y][x]=w;
	}
	void display()
	{
	for(int i=0;i<v;i++)
	{
	 for(int j=0;j<v;j++)
	 {
	  cout<<m[i][j]<<" ";
	 }
	cout<<endl;
	}
	}
	
	void dijkstra()
	{
	int current=0;
	int count=0;
	while(count<v)
	{
	vertex[current]=1;
	for(int i=0;i<v;i++)
	{
          if(m[current][i]!=0 && vertex[i]==-1)
          {
          int temp=distance[current]+m[current][i];
           if(distance[i]>temp)
           {
           distance[i]=temp;
           }
          }
	}
	int min=9999;
	for(int i=0;i<v;i++)
	{
	if(vertex[i]==-1)
	 {
	 if(min>distance[i])
	  {
	  current=i;
	  min=distance[i];
	  }
	 }
	}
	count++;
	}
	cout<<"shortest distance:"<<endl;
	for(int i=0;i<v;i++)
	{
	cout<<"To vertex "<<location[i]<<": "<<distance[i]<<endl;
	}
	}
	
	
};
int main()
{
int v,e,i,w;
string loc1,loc2;
cout<<"enter number of loaction ur home also:";
cin>>v;
cout<<"number of paths from home to location:";
cin>>e;
Graph g(v,e);
cout<<"enter all location name fisrt will home:";
g.addstring();


cout<<"enter paths\n location1 location2 distance:";
for(i=0;i<v;i++)
{   cin>>loc1>>loc2>>w;
    g.addedge(loc1,loc2,w);
}
cout<<"Matrix representation:"<<endl;
g.display();
cout<<endl;
g.dijkstra();
return 0;
}
