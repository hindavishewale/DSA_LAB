#include <iostream>
#include<vector>
using namespace std;
class Graph
{
  public:
    int v;
    int e;
    int m[100][100];
    vector<int> final1;
    vector<int> start1;
    vector<int> edge;
    int mst=0,i,j;
    string stringarray[100];
    Graph(int x,int y)
    {
        v=x;
        e=y;
        for(i=0;i<100;i++)
        {
            for(j=0;j<v;j++)
            {
                m[i][j]=0;
            }
        }
        
        for(i=0;i<v;i++)
        {
            start1.push_back(1);
            final1.push_back(-1);
        }
    }
    
    int stringindex(string s)
    {
        for(i=0;i<v;i++)
        {
            if(stringarray[i]==s)
            {
                return i;
            }
        }
        return -1;
    }
    void addedge(string str1,string str2,int w)
    {
        int x=stringindex(str1);
        int y=stringindex(str2);
        m[x][y]=w;
        m[y][x]=w;
    }
    void display()
    {
        for(i=0;i<v;i++)
        {
            for(j=0;j<v;j++)
            {
                cout<<m[i][j]<<" ";
            }
            cout<<endl;
        }
    }
    
    void addcity()
    {
        for(i=0;i<v;i++)
        {
         cin>>stringarray[i];   
        }
    }
    
    void prims()
    {
        final1[0]=1;
        start1[0]=-1;
        int mst=0;
        int count=v-1;
        for(i=0;i<count;i++)
        {
            int min=9999;
            int parent=-1;
            int child=-1;
            for(j=0;j<v;j++)
            {
                if(final1[j]==1)
                {
                    for(int k=0;k<v;k++)
                    {
                        if((m[j][k]<min)&&(m[j][k]!=0)&&final1[k]==-1)
                        {
                            min=m[j][k];
                            parent=j;
                            child=k;
                        }
                    }
                }
            }
            if(parent!=-1 || child!=-1 )
            {
                edge.push_back(parent);
                edge.push_back(child);
                final1[parent]=1;
                final1[child]=1;
                start1[parent]=-1;
                start1[child]=-1;
                mst+=min;
                edge.push_back(min);
            }
        }
        
        cout<<"shortest paths are:"<<endl;
        for(i=0;i<edge.size();i+=3)
        {
            cout<<stringarray[edge[i]]<<" "<<stringarray[edge[i+1]]<<" "<<edge[i+2]<<endl;
        }
    }
    
};
int main() 
{
    int n,e,w,i;
    string s1,s2;
     cout<<"enter number of city";
     cin>>n;
     cout<<"enter number of paths";
     cin>>e;
     cout<<"enter"<<n<<"city"<<endl;
     Graph g(n,e);
     g.addcity();
     cout<<"enter"<<e<<"paths:"<<endl;
     for(i=0;i<n;i++)
     {
         cin>>s1>>s2>>w;
         g.addedge(s1,s2,w);
     }
     g.display();
     g.prims();

    return 0;
}
